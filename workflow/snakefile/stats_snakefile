msg = "snakefile command recieved - STATS/Wrap up \n"
sys.stderr.write(msg)

# ruleorder: freyja_variants > freyja_demix > sample_freyja_vis
### Define wildcards ###
pe_zpd_samples = glob_wildcards("staging/pe_reads/{sample}_R{read_num}.fastq.gz").sample
pe_unzpd_samples = glob_wildcards("staging/pe_reads/{sample}_R{read_num}.fastq").sample
se_zpd_samples = glob_wildcards("staging/se_reads/{sample}.fastq.gz").sample
se_unzpd_samples = glob_wildcards("staging/se_reads/{sample}.fastq").sample
samples = pe_zpd_samples+ pe_unzpd_samples + se_zpd_samples + se_unzpd_samples

### Define functions for global handelers: Onstart, onsuccess and onerror ###
# Define the onstart handler
def onstart(samples):
    print(f"Starting workflow for {wildcards}")
# Define the onsuccess handler
def onsuccess(samples):
    print(f"Workflow completed successfully for {wildcards}")


# Define the onerror handler
def onerror(wildcards, input, output, error):
    msg = f"Error occurred for {wildcards} \n \
    Input: {input} \n \
    Output: {output} \n \
    Error: {error}"
    with open("JobFailed.txt", "w") as failed_samples:
        print(msg)
    pass

### Define global handlers ###
onstart: onstart
onsuccess: onsuccess
onerror: onerror
configfile: "config.json"
workflow_dir = config["workflow_dir"]
### version long variables ###
primer_type = config["params"]["primers"]
primer_version = config["params"]["primer_version"]

rule all:
    input:
        "output/multiqc_report.html",
        "output/version_log.txt",
        "output/job_stats.csv"


rule multiqc:
    input:
       multiqc_config = os.path.join(workflow_dir, "multiqc_config.yaml"),
    params:
        landing_dir = directory('output'),
        tmp_multiqc_dir = directory('output/multiqc_data')
    output:
        'output/multiqc_report.html',
        cl_multiqc_dir = directory("clean_up/multiqc_data")
    shell:
        """
        multiqc --version

        multiqc output/. \
            -c {input.multiqc_config} \
            -o {params.landing_dir} --fullnames \
            -f
        
        mkdir -p {output.cl_multiqc_dir}

        mv {params.tmp_multiqc_dir} {output.cl_multiqc_dir}
        """

rule write_out_versions:
    output: version_log = "output/version_log.txt"
    params:
        primer_tp = primer_type,
        primer_v = primer_version
    shell:
        """
        echo "The results may vary depending on the version of Freyja, its dependences and the barcode file used. The barcode file is a .tsv file that is used in lineage-determination defined by the UShER global phylogenetic tree. We update the barcodes every two weeks.\n Below are the versions of the tools used in this analysis. \n" >> {output.version_log}

        echo "primer type: {params.primer_tp}" >> {output.version_log}

        echo "primer version: {params.primer_v}" >> {output.version_log}
        freyja --version >> {output.version_log}

        echo "Barcode version:" >> {output.version_log}

        echo usher --version >> {output.version_log}

        ivar version >> {output.version_log}

        samtools version >> {output.version_log}
        """

rule run_stats_report:
    params:
        prep_results_path = os.path.join(workflow_dir, 'scripts/prep_results.py')
    output:
        results_csv = "output/job_stats.csv"
    shell:
        """
        python3 {params.prep_results_path} {output.results_csv}
        """