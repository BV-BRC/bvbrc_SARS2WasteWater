msg = 'snakefile command recieved - FREYJA SINGLE END FASTQ PROCESSING \n'
sys.stderr.write(msg)

### Define wildcards ###
zpd_samples = glob_wildcards("staging/se_reads/{sample}.fastq.gz").sample
unzpd_samples = glob_wildcards("staging/se_reads/{sample}.fastq").sample
samples = zpd_samples + unzpd_samples

### Define functions for global handelers: Onstart, onsuccess and onerror ###
# Define the onstart handler
def onstart(samples):
    print(f"Starting workflow for {wildcards}")
# Define the onsuccess handler
def onsuccess(samples):
    print(f"Workflow completed successfully for {wildcards}")

# Define the onerror handler
def onerror(wildcards, input, output, error):
    msg = f"Error occurred for {wildcards} \n \
    Input: {input} \n \
    Output: {output} \n \
    Error: {error}"
    with open("JobFailed.txt", "w") as failed_samples:
        print(msg)
    pass

### Define global handlers ###
onstart: onstart
onsuccess: onsuccess
onerror: onerror

### Get variables from config ###
configfile: "config.json"
primer = config["params"]["primers"]
primer_ver = config["params"]["primer_version"]

# Define base rule all
rule_all_list = [
    expand('output/{sample}/fastqc_results/{sample}.ivar_fastqc.html', sample = samples)
    ]


### Add zpd samples to rule all list ###
if len(zpd_samples) >= 1:
    rule_all_list.append(expand('output/{zpd_sample}/assembly/{zpd_sample}.ivar.bam', zpd_sample = zpd_samples))
    rule_all_list.append(expand('output/{zpd_sample}/fastqc_results/{zpd_sample}_fastqc.html', zpd_sample = zpd_samples))
else:
    msg = "no zpd single end samples"
    sys.stderr.write(msg)

### Add unzpd samples to rule all list ###
if len(unzpd_samples) >= 1:
    rule_all_list.append(expand('output/{unzpd_sample}/assembly/{unzpd_sample}.ivar.bam', unzpd_sample = unzpd_samples))
    rule_all_list.append(expand('output/{unzpd_sample}/fastqc_results/{unzpd_sample}_fastqc.html', unzpd_sample = unzpd_samples))
else:
    msg = "no unzpd single end samples"
    sys.stderr.write(msg)

rule all:
    input:
        rule_all_list

rule zpd_assembly:
    input:
        se_read = 'staging/se_reads/{zpd_sample}.fastq.gz',
    params:
        output_base = '{zpd_sample}',
        output_dir = 'output/{zpd_sample}/assembly',
        primer_type = primer,
        primer_version = primer_ver,
    output:
        ivar_bam = 'output/{zpd_sample}/assembly/{zpd_sample}.ivar.bam',
        ivar_sorted_bam = 'output/{zpd_sample}/assembly/{zpd_sample}.sorted.bam'
    shell:
        '''
        mkdir -p {params.output_dir}

        sars2-onecodex -k -j 12 -D 3 -d 8000 \
            --primer-version {params.primer_version} \
            --primers {params.primer_type} \
            -n {wildcards.zpd_sample} \
            --se-read {input.se_read} \
            {params.output_base} \
            {params.output_dir}
        '''

rule unzpd_assembly:
    input:
        se_read = 'staging/se_reads/{unzpd_sample}.fastq',
    params:
        output_base = '{unzpd_sample}',
        output_dir = 'output/{unzpd_sample}/assembly',
        primer_type = primer,
        primer_version = primer_ver
    output:
        ivar_bam = 'output/{unzpd_sample}/assembly/{unzpd_sample}.ivar.bam',
        ivar_sorted_bam = 'output/{unzpd_sample}/assembly/{unzpd_sample}.sorted.bam'
    shell:
        '''
        mkdir -p {params.output_dir}

        sars2-onecodex -k -j 12 -D 3 -d 8000 \
            --primer-version {params.primer_version} \
            --primers {params.primer_type} \
            -n {wildcards.unzpd_sample} \
            --se-read {input.se_read} \
            {params.output_base} \
            {params.output_dir}
        '''

rule fastqc_zpd_reads:
    input:
        raw_read = 'staging/se_reads/{zpd_sample}.fastq.gz',
    params:
        fastqc_dir = 'output/{zpd_sample}/fastqc_results',
        clean_up = 'clean_up',
    output:
        fastqc_html = 'output/{zpd_sample}/fastqc_results/{zpd_sample}_fastqc.html',
    shell:
        '''
        mkdir -p {params.fastqc_dir}
        mkdir -p {params.clean_up}

        /opt/patric-common/runtime/bin/fastqc --version

        /opt/patric-common/runtime/bin/fastqc {input.raw_read} \
        -o {params.fastqc_dir} -q
        '''

rule fastqc_unzpd_reads:
    input:
        raw_read = 'staging/se_reads/{unzpd_sample}.fastq',
    params:
        fastqc_dir = 'output/{unzpd_sample}/fastqc_results',
        clean_up = 'clean_up',
    output:
        fastqc_html = 'output/{unzpd_sample}/fastqc_results/{unzpd_sample}_fastqc.html',
    shell:
        '''
        mkdir -p {params.fastqc_dir}
        mkdir -p {params.clean_up}

        /opt/patric-common/runtime/bin/fastqc --version

        /opt/patric-common/runtime/bin/fastqc {input.raw_read} \
        -o {params.fastqc_dir} -q
        '''

rule fastqc_ivar:
    input:
        ivar_bam = 'output/{sample}/assembly/{sample}.ivar.bam',
        ivar_sorted_bam = 'output/{sample}/assembly/{sample}.sorted.bam'
    params:
        fastqc_dir = 'output/{sample}/fastqc_results',
        clean_up = 'clean_up',
    output:
        ivar_html = 'output/{sample}/fastqc_results/{sample}.ivar_fastqc.html',
        ivar_sorted_html = 'output/{sample}/fastqc_results/{sample}.sorted_fastqc.html',
    shell:
        '''
        mkdir -p {params.fastqc_dir}
        mkdir -p {params.clean_up}

        /opt/patric-common/runtime/bin/fastqc --version

        /opt/patric-common/runtime/bin/fastqc {input.ivar_bam} \
        -o {params.fastqc_dir} -q

        /opt/patric-common/runtime/bin/fastqc {input.ivar_sorted_bam} \
        -o {params.fastqc_dir} -q
        '''
